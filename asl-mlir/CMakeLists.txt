cmake_minimum_required(VERSION 3.20)
project(asl-mlir)

find_package(MLIR REQUIRED CONFIG)

message(STATUS "Using MLIRConfig.cmake in: ${MLIR_DIR}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")

set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/bin)
set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/lib)
set(MLIR_BINARY_DIR ${CMAKE_BINARY_DIR})

list(APPEND CMAKE_MODULE_PATH "${MLIR_CMAKE_DIR}")
list(APPEND CMAKE_MODULE_PATH "${LLVM_CMAKE_DIR}")

include(TableGen)
include(AddLLVM)
include(AddMLIR)
include(HandleLLVMOptions)
include_directories(${LLVM_INCLUDE_DIRS})
include_directories(${MLIR_INCLUDE_DIRS})
include_directories(${PROJECT_SOURCE_DIR}/include)
include_directories(${PROJECT_BINARY_DIR}/include)
link_directories(${LLVM_BUILD_LIBRARY_DIR})
add_definitions(${LLVM_DEFINITIONS})
set(ASL_TOOLS_DIR "${CMAKE_BINARY_DIR}/bin" CACHE PATH "Directory containing built ASL MLIR tools")
message(STATUS "ASL_TOOLS_DIR = ${ASL_TOOLS_DIR}")
if(NOT AJB_TOOLS_DIR)
  find_program(ASL_JSON_BACKEND_EXE NAMES asl-json-backend)
  get_filename_component(AJB_TOOLS_DIR "${ASL_JSON_BACKEND_EXE}" DIRECTORY)
  set(AJB_TOOLS_DIR "${AJB_TOOLS_DIR}" CACHE PATH "Directory containing asl-json-backend")
  message(STATUS "Found asl-json-backend in PATH: ${ASL_JSON_BACKEND_EXE}")
endif()
# Export to tests via configure_lit_site_cfg substitutions
set(AJB_TOOLS_DIR ${AJB_TOOLS_DIR} CACHE PATH "Directory containing asl-json-backend" FORCE)
set(ASL_TOOLS_DIR ${ASL_TOOLS_DIR} CACHE PATH "Directory containing built ASL MLIR tools" FORCE)

add_subdirectory(include/ASL)
add_subdirectory(lib/ASL)
add_subdirectory(asl-opt)
add_subdirectory(test)
